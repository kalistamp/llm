name: Auto-Update LLM Submodules

on:
  schedule:
    # Runs monthly on the 1st day of the month at 00:00 UTC
    # This corresponds to 5 PM PDT on the last day of the previous month.
    # Adjust this cron schedule if you prefer a different frequency (e.g., weekly, daily, specific time)
    - cron: '0 0 1 * *' 
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

permissions:
  contents: write # Needed to commit and push changes
  issues: write   # Needed to create the notification issue (optional)

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Important: Fetch depth 0 to get all branches and history, necessary for submodules
          fetch-depth: 0 
          # Pass GitHub Token to allow pushing changes back to the repository
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Initialize and Update Submodules
        run: |
          echo "Fetching latest changes for all submodules..."
          # The --init command initializes submodules that are not yet initialized in the local repository.
          # The --recursive option updates nested submodules as well.
          # The --remote option fetches the latest changes from the submodule's remote tracking branch
          # (usually 'main' or 'master' unless configured otherwise in .gitmodules)
          git submodule update --init --recursive --remote
          echo "Submodules updated to their latest remote HEADs."

      - name: Configure Git and Prepare Commit
        # This step will prepare the commit if there are changes.
        # It won't fail the workflow if no changes are detected.
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all potentially changed files, including updated submodule pointers
          # The '|| true' ensures this command doesn't fail the step if nothing is added.
          git add . || true 
          
          # Check if there are any pending changes to commit (staged files).
          # 'git diff --cached --exit-code' exits with 0 if no differences, 1 if differences.
          # We'll use this exit code to control the next steps.
          if git diff --cached --exit-code; then
            echo "::notice::No submodule updates detected. Skipping commit."
            # Set an output to inform subsequent steps that no changes were made.
            echo "changes_detected=false" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::Submodule updates detected. Preparing commit."
            # Set an output to inform subsequent steps that changes were made.
            echo "changes_detected=true" >> "$GITHUB_OUTPUT"
            # Since we're pushing later, we'll just prepare the commit message for the next step.
            # No actual 'git commit' here, as that happens in the 'Commit Changes' step if needed.
          fi
        id: prepare_commit # This ID is crucial for referring to its output

      - name: Commit Changes
        # This step will only run if 'changes_detected' is true from the previous step.
        if: steps.prepare_commit.outputs.changes_detected == 'true'
        run: |
          git commit -m "Automated: Update LLM submodules to latest"
          echo "Changes committed successfully."
        id: commit_changes

      - name: Push Changes
        # This step will only run if the 'Commit Changes' step ran and succeeded.
        if: steps.commit_changes.outcome == 'success'
        run: |
          git push
          echo "Submodule updates pushed to remote."
        id: push_changes

      - name: Notify on Submodule Updates (Optional create issue)
        # This step will only run if changes were committed and pushed successfully.
        if: steps.push_changes.outcome == 'success' && steps.prepare_commit.outputs.changes_detected == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "ðŸ¤– LLM Submodules Updated Automatically",
              body: `Hello,

            This is an automated notification. The LLM repository's submodules have been automatically updated to their latest versions as per the scheduled workflow.

            Please review the recent commits to see the specific submodule updates.`,
              labels: ["automated", "submodule-update"]
            });
            console.log("Notification issue created for submodule update.");
